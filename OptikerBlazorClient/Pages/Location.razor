@page "/location/{Id:long}"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage
@inject CustomAuthStateProvider customAuthStateProvider
@inject IBlazorDownloadFileService blazorDownloadFileService

@if (isLoading)
{
    <div class="modal-overlay">
        <Chase />
    </div>
}

<div id="location-page" class="container-fluid">
    <div class="row">
        <div class="col-10 offset-1">
            <div id="error-compenent" class="@(string.IsNullOrWhiteSpace(error) ? "d-none" : null)">
                @error
            </div>

            <h4 class="m-b-40">Hier können Sie Ihre Daten ändern.</h4>
        </div>
    </div>

    <div class="row">
        <div class="col-2 offset-1">
            <div class="sidebar">
                <ul class="nav flex-column">
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="#base-data" data-toggle="collapse" aria-expanded="true" aria-controls="base-data">
                            <i class="fas fa-home"></i> Stammdaten
                        </NavLink>
                    </li>
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="#spot-data" data-toggle="collapse" aria-expanded="false" aria-controls="spot-data">
                            <i class="fas fa-chair"></i> Spot-Daten
                        </NavLink>
                    </li>
                </ul>
            </div>
        </div>

        <div class="col-8">
            <div id="base-data" class="collapse show" data-parent="#location-page">
                <EditForm Model="@Model" OnValidSubmit="@UpdateOptiker">
                    <DataAnnotationsValidator />

                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label>Vorname*</label>
                                <InputText @bind-Value="@Model.FirstName" class="form-control" />
                            </div>

                            <div class="form-group">
                                <label>Nachname*</label>
                                <InputText @bind-Value="@Model.LastName" class="form-control" />
                            </div>

                            <div class="form-group">
                                <label>Name der Bar/des Restaurants*</label>
                                <InputText @bind-Value="@Model.CompanyName" class="form-control" />
                            </div>

                            <div class="form-group">
                                <label>Straße*</label>
                                <InputText @bind-Value="@Model.Street" class="form-control" />
                            </div>

                            <div class="form-group">
                                <label>Adresszusatz</label>
                                <InputText @bind-Value="@Model.AddressAddition" class="form-control" />
                            </div>

                            <div class="form-group">
                                <label>PLZ/Ort*</label>
                                <div class="row">
                                    <div class="col-4">
                                        <InputText @bind-Value="@Model.PostalCode" class="form-control" maxlength="5" />
                                    </div>
                                    <div class="col-8">
                                        <InputText @bind-Value="@Model.City" class="form-control" />
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label>Telefon</label>
                                <InputText @bind-Value="@Model.Phone" class="form-control" />
                            </div>
                        </div>
                    </div>

                    <hr style="margin-bottom: 2rem" />

                    <div class="row">
                        <div class="col-3">
                            <button type="submit" class="btn btn-success btn-block text-uppercase">
                                Speichern
                            </button>
                        </div>

                        <div class="col-3 offset-6">
                            <button class="btn btn-danger btn-block text-uppercase" @onclick="@(() => DeleteLocation())">
                                Konto löschen
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public long Id { get; set; }

    OptikerResult Model = new OptikerResult();

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    bool isLoading { get; set; } = true;

    string error { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        try
        {
            if ((await authenticationStateTask).User.Identity.IsAuthenticated && await localStorage.GetItemAsync<long>("locationId") == Id)
            {
                Model = await httpClient.GetFromJsonAsync<OptikerResult>($"api/Optiker/GetOptikerById/{Id}");
            }
            else
            {
                navigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    async Task UpdateOptiker()
    {
        try
        {
            error = null;
            isLoading = true;

            if ((await authenticationStateTask).User.Identity.IsAuthenticated && await localStorage.GetItemAsync<long>("locationId") == Id)
            {
                var response = await httpClient.PostAsJsonAsync($"api/Optiker/UpdateOptiker", Model);
                var content = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    throw new ApplicationException(content);
                }
            }
            else
            {
                error = "Sie haben keine Berechtigung!";
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    async Task DeleteLocation()
    {
        try
        {
            error = null;
            isLoading = true;

            if ((await authenticationStateTask).User.Identity.IsAuthenticated && await localStorage.GetItemAsync<long>("locationId") == Id)
            {
                await httpClient.DeleteAsync($"api/Optiker/DeleteLocation/{Id}");
                await localStorage.RemoveItemAsync("authToken");
                await localStorage.RemoveItemAsync("locationId");
                customAuthStateProvider.MarkUserAsLoggedOut();
                navigationManager.NavigateTo("/", true);
            }
            else
            {
                error = "Du bist nicht berechtigt!";
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    async void OnRowInsertedOrUpdated(SavedRowItem<BarSpotResult, Dictionary<string, object>> args)
    {
        try
        {
            error = null;
            isLoading = true;
#if LATER
            if ((await authenticationStateTask).User.Identity.IsAuthenticated && await localStorage.GetItemAsync<long>("locationId") == Id)
            {
                BarSpotResult locationSpot = args.Item;

                if (locationSpot.LocationId == 0)
                {
                    locationSpot.LocationId = Id;
                }

                foreach (var v in args.Values)
                {
                    if (v.Key == "Name")
                    {
                        locationSpot.Name = (string)v.Value;
                    }
                    if (v.Key == "Description")
                    {
                        locationSpot.Description = (string)v.Value;
                    }
                    if (v.Key == "AreaType")
                    {
                        locationSpot.AreaType = (AreaType)v.Value;
                    }
                    if (v.Key == "SpotType")
                    {
                        locationSpot.SpotType = (SpotType)v.Value;
                    }
                    if (v.Key == "MaxPersons")
                    {
                        locationSpot.MaxPersons = (int)v.Value;
                    }
                }

                var response = await httpClient.PostAsJsonAsync($"api/location/AddOrUpdateLocationSpot", locationSpot);
                var content = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    throw new ApplicationException(content);
                }

                Model = await httpClient.GetFromJsonAsync<BarResult>($"/api/location/GetLocationById/{Id}");
            }
            else
            {
                error = "Du bist nicht berechtigt!";
            }
#endif
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    async void DeleteSpot(long spotId)
    {
        try
        {
            error = null;
            isLoading = true;
#if LATER
            if ((await authenticationStateTask).User.Identity.IsAuthenticated && await localStorage.GetItemAsync<long>("locationId") == Id)
            {
                var response = await httpClient.DeleteAsync($"api/location/DeleteLocationSpot/{spotId}");
                var content = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    throw new ApplicationException(content);
                }
            }
            else
            {
                error = "Du bist nicht berechtigt!";
            }

            Model = await httpClient.GetFromJsonAsync<BarResult>($"api/location/GetLocationById/{Id}");
#endif
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}